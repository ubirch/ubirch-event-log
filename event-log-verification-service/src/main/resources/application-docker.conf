include "application-base.conf"

verification {
  http {
    port = 8080
  }

  swaggerBaseUrl = ${SWAGGER_BASE_URL}

  eventResponse-by-hash-cache {
    timeToLive = ${CACHE_EVENT_BY_HASH_TTL}
    maxIdleTime = 0 s
  }

  eventResponse-by-signature-cache {
    timeToLive = ${CACHE_EVENT_BY_SIGNATURE_TTL}
    maxIdleTime = 0 s
  }

  health-check {
    port = 8888
    enabled = false
  }
}

ubirchKeyService.client.rest.host = ${KEY_SERVICE_URL}

redisson {
  main {
    singleServerConfig {
      address = "redis://"${REDIS_MASTER_URL}
      clientName = "event-log-verification-service"
      password = ${REDIS_PASSWORD}
    }
  }
  fallbacks = [
    {
      replicatedServersConfig {
        nodeAddresses = [
          "redis://"${REDIS_MASTER_URL},
          "redis://"${REDIS_SLAVE_URL}
        ]
        clientName = "event-log-verification-service"
        password = ${REDIS_PASSWORD}
      }
    }
  ]
}


eventLog {

  gremlin {

    hosts = ${LU_GRM_HOSTS}
    port = ${LU_GRM_PORT}

    connectionPool {
      reconnectInterval = ${LU_GRM_COONPOOL_RECONINTERVAL}
      maxWaitForConnection = ${LU_GRM_COONPOOL_MAXWAITCONNECTION}
    }

    nioPoolSize = ${LU_GRM_NIO_POOL_SIZE}
    workerPoolSize = ${LU_GRM_WORKER_POOL_SIZE}

    safeMode = ${LU_GRM_SAFEMODE}

  }

  cassandra {

    cluster {

      keyspace: ${LU_CS_KEYSPACE}
      preparedStatementCacheSize: ${LU_CS_PREPSTM_CACHE}
      //Comma-separeted values of IP/Hostname and ports
      contactPoints: ${LU_CS_NODES}
      //ANY, ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, SERIAL, LOCAL_SERIAL, LOCAL_ONE
      consistencyLevel = ${LU_CS_CONSISTENCY_LEVEL}
      serialConsistencyLevel = ${LU_CS_SERIAL_CONSISTENCY_LEVEL}
      withSSL: ${LU_CS_WITH_SSL}
      username: ${LU_CS_USERNAME}
      password: ${LU_CS_PASSWORD}

    }
  }

  metrics {
    prometheus {
      port = ${LU_PROM_HTTP_PORT}
    }
  }

  executionContext {
    threadPoolSize = ${LU_EXEC_THREAD_POOL_SIZE}
  }

}
