verification {

  env=dev

  http {
    port = 9090
  }

  swaggerBaseUrl = "http://localhost:9090/api/"

  eventResponse-by-hash-cache {
    timeToLive = 60 s
    maxIdleTime = 0 s
  }

  eventResponse-by-signature-cache {
    timeToLive = 60 s
    maxIdleTime = 0 s
  }

  health-check {
    port = 8888
    enabled = false
  }

  number-different-anchors = 2

  acctEvent {
    kafkaProducer {
      lingerMS = 100
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = "localhost:9092"
      topic = "ubirch-acct-evt-json"
      errorTopic = "com.ubirch.acct.error"

    }
  }

}

token {
  tokenPublicKey = "2e09fc73de8b067c4c38292e8d683ed3abaef220c9b8a6b85935a055359139a70f17b2e76543518a113fba84863db6060bb0224fc45104ca0ac8a8279b0d744a"
  issuer="https://token."${verification.env}".ubirch.com"
  audience="https://verify."${verification.env}".ubirch.com"
  tokenManager: ${token.issuer}
  scopes=["upp:verify"]
  secret: "judgDg3jaCDM-WjQqQ1dFfqFL3i9myrPMUPUUVQzgnDx5keE7r6WBTzHP"
}

ubirchKeyService.client.rest.host = ""

redisson {
  main {
    singleServerConfig {
      address = "redis://"${REDIS_MASTER_URL}
      clientName = "event-log-verification-service"
      password = ${REDIS_PASSWORD}
    }
  }
  fallbacks = [
    {
      replicatedServersConfig {
        nodeAddresses = [
          "redis://"${REDIS_MASTER_URL},
          "redis://"${REDIS_SLAVE_URL}
        ]
        clientName = "event-log-verification-service"
        password = ${REDIS_PASSWORD}
      }
    }
  ]
}

eventLog {

  gremlin {

    hosts = localhost
    port = 8182

    connectionPool {
      reconnectInterval = 500
      maxWaitForConnection = 6000
    }
    serializer {
      config {
        ioRegistries = [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry]
      }
    }

    properties = "event-log-verification-service/src/test/resources/janusgraph.properties"
    truststore = ""

    nioPoolSize = 3
    workerPoolSize = 6

    safeMode = false

  }


  metrics {
    prometheus {
      port = 4321
    }
  }

  executionContext {
    threadPoolSize = 5
  }

}

cassandra {
  cluster {
    keyspace: "event_log"
    preparedStatementCacheSize: 1000
    //Comma-separeted values of IP/Hostname and ports
    contactPoints: "localhost:9042"
    localDataCenter: "datacenter1"
    //ANY, ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, SERIAL, LOCAL_SERIAL, LOCAL_ONE
    consistencyLevel = "LOCAL_ONE"
    serialConsistencyLevel = "SERIAL"
    withSSL: false
    username: ""
    password: ""
  }
}
